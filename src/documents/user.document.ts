import {
  attribute,
  table,
  autoGeneratedHashKey
} from '@aws/dynamodb-data-mapper-annotations';
import {
  IsEmail,
  IsNotEmpty,
  IsDate,
  Validate,
  MinLength,
  IsIn
} from 'class-validator';
import { Type, Expose, Exclude } from 'class-transformer';
import { UniqueEmailValidator } from '@app/validators/unique-email.validator';
import { UniqueUsernameValidator } from '@app/validators/unique-username.validator';

@table(process.env.TABLE_NAME)
@Exclude({ toPlainOnly: true })
export class User {
  @autoGeneratedHashKey()
  @Expose({ groups: ['get'] })
  private id: string;

  @attribute({ defaultProvider: () => new Date() })
  @Expose({ groups: ['get'] })
  private createdAt: Date;

  @attribute()
  @IsNotEmpty({
    groups: ['create']
  })
  @Validate(UniqueUsernameValidator, { groups: ['create'] })
  @Expose({ groups: ['get', 'create'] })
  private username: string;

  @attribute()
  @IsEmail(
    {},
    {
      groups: ['create']
    }
  )
  @IsNotEmpty({
    groups: ['create']
  })
  @Validate(UniqueEmailValidator, { groups: ['create'] })
  @Expose({ groups: ['get', 'create'] })
  private email: string;

  @attribute()
  @IsNotEmpty({ groups: ['create'] })
  @IsIn(['ROLE_USER', 'ROLE_ADMIN'], { groups: ['create'] })
  @Expose({ groups: ['create'] })
  private role: string;

  @attribute()
  @MinLength(6, { groups: ['create'] })
  @IsNotEmpty({ groups: ['create'] })
  @Expose({ groups: ['create'] })
  private password: string;

  @attribute({ defaultProvider: () => new Date() })
  @Type(() => Date)
  @IsDate()
  @Expose({ groups: ['get'] })
  private updatedAt: Date;

  @Expose({ groups: ['get'] })
  private accessToken: string;

  /**
   * Sets id.
   *
   * @param {string} id
   *
   * @returns {User}
   */
  public setId(id: string): this {
    this.id = id;

    return this;
  }

  /**
   * Gets id.
   *
   * @returns {string}
   */
  public getId(): string {
    return this.id;
  }

  /**
   * Sets username.
   *
   * @param {string} username
   *
   * @returns {User}
   */
  public setUsername(username: string): this {
    this.username = username;

    return this;
  }

  /**
   * Gets username.
   *
   * @returns {string}
   */
  public getUsername(): string {
    return this.username;
  }

  /**
   * Sets email.
   *
   * @param {string} email
   *
   * @returns {User}
   */
  public setEmail(email: string): this {
    this.email = email;

    return this;
  }

  /**
   * Gets email.
   *
   * @returns {string}
   */
  public getEmail(): string {
    return this.email;
  }

  /**
   * Sets role.
   *
   * @param {string} role
   *
   * @returns {User}
   */
  public setRole(role: string): this {
    this.role = role;

    return this;
  }

  /**
   * Gets role.
   *
   * @returns {string}
   */
  public getRole(): string {
    return this.role;
  }

  /**
   * Sets createdAt.
   *
   * @param {Date} createdAt
   *
   * @returns {User}
   */
  public setCreatedAt(createdAt: Date): this {
    this.createdAt = createdAt;

    return this;
  }

  /**
   * Gets createdAt.
   *
   * @returns {Date}
   */
  public getCreatedAt(): Date {
    return this.createdAt;
  }

  /**
   * Sets password.
   *
   * @param {string} password
   *
   * @returns {User}
   */
  public setPassword(password: string): this {
    this.password = password;

    return this;
  }

  /**
   * Gets password.
   *
   * @returns {string}
   */
  public getPassword(): string {
    return this.password;
  }

  /**
   * Sets updatedAt.
   *
   * @param {Date} updatedAt
   *
   * @returns {User}
   */
  public setUpdatedAt(updatedAt: Date): this {
    this.updatedAt = updatedAt;

    return this;
  }

  /**
   * Gets updatedAt.
   *
   * @returns {Date}
   */
  public getUpdatedAt(): Date {
    return this.updatedAt;
  }

  /**
   * Sets accessToken.
   *
   * @param {string} accessToken
   *
   * @returns {User}
   */
  public setAccessToken(accessToken: string): this {
    this.accessToken = accessToken;

    return this;
  }

  /**
   * Gets accessToken.
   *
   * @returns {string}
   */
  public getAccessToken(): string {
    return this.accessToken;
  }
}
